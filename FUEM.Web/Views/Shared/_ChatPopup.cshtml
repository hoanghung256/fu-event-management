@* @model List<ChatMessage> *@
@* @model List<ChatGroup> *@
@{
    //int? currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier) != null ? int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value) : null;
	string? currentUserName = User.FindFirst(System.Security.Claims.ClaimTypes.GivenName) != null ? User.FindFirst(System.Security.Claims.ClaimTypes.GivenName).Value : null;
	ViewData["Title"] = "Chat";
}
<div id="chatWidget" class="position-fixed bottom-0 end-0 m-3 bg-light border rounded shadow"
	 style="z-index: 1050; width: 700px; max-width: 100%; height: 400px; display: flex; flex-direction: row;">

	<!-- Group List -->
	<div id="groupListWrapper" class="h-100 border-end" style="width: 40%; overflow-y: auto;">
		<div class="p-2 bg-primary text-white fw-bold">Chat Groups</div>
		<ul class="list-group list-group-flush" id="groupList" style="cursor: pointer;"></ul>
	</div>

	<!-- Chat Section (initially hidden) -->
	<div id="chatPanelWrapper" class="h-100 d-none flex-grow-1 d-flex flex-column">
		<div class="bg-success text-white p-2 fw-bold" id="groupTitle">Select a group</div>
		<input type="hidden" id="currentUserName" value="@currentUserName" />
		<!-- Chat display area -->
		<div class="flex-grow-1 overflow-auto p-2 d-flex flex-column" style="height: 0; position: relative;">
			<!-- Loading spinner should NOT be inside #chatMessages -->
			<div id="chatLoading" style="text-align: center; padding: 5px; display: none;">
				<div class="spinner-border text-secondary" role="status" style="width: 1.5rem; height: 1.5rem;">
					<span class="visually-hidden">Loading...</span>
				</div>
			</div>

			<!-- Chat messages container -->
			<div id="chatMessages" class="flex-grow-1 overflow-auto" style="overflow-anchor: none;"></div>
		</div>
		<div class="p-2 border-top d-flex">
			<input type="text" id="messageInput" class="form-control me-2" placeholder="Type your message..." />
			<button id="sendButton" class="btn btn-success">
				<i class="bi bi-send-fill"></i>
			</button>
		</div>
	</div>
</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
@* <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script> *@
@* <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script> *@
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>

<script>
	// let currentGroup = "";
	// let currentGroupEvent = "";

	// fetch('/Chat/GetUserGroups')
	// 	.then(res => res.json())
	// 	.then(groups => {
	// 		const ul = document.getElementById('groupList');
	// 		groups.forEach(group => {
	// 			const li = document.createElement('li');
	// 			li.className = "list-group-item list-group-item-action";
	// 			li.style.cursor = "pointer";
	// 			li.textContent = `${group.name} - ${group.eventName}`;
	// 			li.onclick = () => loadGroupChat(group.name, group.eventName);
	// 			ul.appendChild(li);
	// 		});
	// 	});

	// async function loadGroupChat(groupName, eventName) {
	// 	currentGroup = groupName;
	// 	currentGroupEvent = eventName;

	// 	document.getElementById("groupTitle").innerText = `${groupName} - ${eventName}`;
	// 	document.getElementById("chatMessages").innerHTML = "";

	// 	document.getElementById("chatPanelWrapper").classList.remove("d-none");

	// 	await connection.invoke("JoinGroup", groupName, eventName);

	// 	fetch(`/Chat/GetGroupMessages?groupName=${groupName}&eventName=${eventName}`)
	// 		.then(res => res.json())
	// 		.then(messages => {
	// 			messages.forEach(msg => {
	// 		    console.log(`msg user : ${msg.user} & msg text : ${msg.text}`);
	// 			const currentUserName = document.getElementById("currentUserName").value;
	// 			appendMessage(msg.user, msg.text, msg.user === currentUserName);
	// 			scrollToBottom();
	// 			});
	// 		});
	// }

	function appendMessage(user, message, isOwnMessage) {
		const msgDiv = document.createElement("div");

		msgDiv.className = "mb-1 d-flex";
		msgDiv.style.justifyContent = isOwnMessage ? "flex-end" : "flex-start";

		const bubble = document.createElement("div");
		bubble.innerHTML = `<strong>${user}</strong><br>${message}`;
		bubble.className = "p-2 rounded";
		bubble.style.maxWidth = "70%";
		bubble.style.backgroundColor = isOwnMessage ? "#DCF8C6" : "#E4E6EB";
		bubble.style.textAlign = "left";

		msgDiv.appendChild(bubble);
		document.getElementById("chatMessages").appendChild(msgDiv);
		scrollToBottom();
	}

	function scrollToBottom() {
		const chatBox = document.getElementById("chatMessages");
		chatBox.scrollTop = chatBox.scrollHeight;
	}

	const connection = new signalR.HubConnectionBuilder()
		.withUrl("/chatHub", { withCredentials: true })
		.configureLogging(signalR.LogLevel.Information)
		.withAutomaticReconnect()
		.build();

	connection.on("ReceiveMessage", function (user, message) {
		const currentUserName = document.getElementById("currentUserName").value;
		appendMessage(user, message, user === currentUserName);
	});

	connection.start().catch(err => console.error(err.toString()));

	document.getElementById("sendButton").addEventListener("click", function (event) {
		event.preventDefault();
		const message = document.getElementById("messageInput").value.trim();
		if (message !== "") {
			connection.invoke("SendMessage", currentGroup, currentGroupEvent, message)
				.then(() => {
					document.getElementById("messageInput").value = "";
				})
				.catch(err => console.error(err.toString()));
		}
	});

	let skipCount = 0;
	const pageSize = 5;
	let loadingOldMessages = false;
	let hasMoreMessages = true;
	let isFirstLoad = true;
	fetch('/Chat/GetUserGroups')
		.then(res => res.json())
		.then(groups => {
			const ul = document.getElementById('groupList');
			groups.forEach(group => {
				const li = document.createElement('li');
				li.className = "list-group-item list-group-item-action";
				li.style.cursor = "pointer";
				li.textContent = `${group.name} - ${group.eventName}`;
				li.onclick = () => loadGroupChat(group.name, group.eventName);
				ul.appendChild(li);
			});
		});

	async function loadGroupChat(groupName, eventName) {
		currentGroup = groupName;
		currentGroupEvent = eventName;
		skipCount = 0;
		isFirstLoad = true;
		hasMoreMessages = true;
		loadingOldMessages = false;

		document.getElementById("groupTitle").innerText = `${groupName} - ${eventName}`;
		document.getElementById("chatMessages").innerHTML = "";

		document.getElementById("chatPanelWrapper").classList.remove("d-none");

		await connection.invoke("JoinGroup", groupName, eventName);

		await loadMessages();
	}

	async function loadMessages() {
		if (loadingOldMessages || !hasMoreMessages) return;
		loadingOldMessages = true;

		const chatLoading = document.getElementById("chatLoading");
		chatLoading.style.display = "block";

		const chatBox = document.getElementById("chatMessages");
		const scrollBefore = chatBox.scrollHeight;

		const res = await fetch(`/Chat/GetGroupMessages?groupName=${currentGroup}&eventName=${currentGroupEvent}&skip=${skipCount}&take=${pageSize}`);
		const messages = await res.json();

		if (!messages || messages.length === 0) {
			hasMoreMessages = false;
			loadingOldMessages = false;
			chatLoading.style.display = "none";
			return;
		}

		const currentUserName = document.getElementById("currentUserName").value;
		const reversed = messages.reverse();

		if (isFirstLoad) {
			reversed.forEach(msg => {
				appendMessage(msg.user, msg.text, msg.user === currentUserName);
			});
			scrollToBottom();
			isFirstLoad = false;
		} else {
			reversed.reverse().forEach(msg => {
				prependMessage(msg.user, msg.text, msg.user === currentUserName);
			});
			chatBox.scrollTop = chatBox.scrollHeight - scrollBefore;
		}

		skipCount += messages.length;
		loadingOldMessages = false;

		chatLoading.style.display = "none";
	}


	function prependMessage(user, message, isOwnMessage) {
		const msgDiv = document.createElement("div");

		msgDiv.className = "mb-1 d-flex";
		msgDiv.style.justifyContent = isOwnMessage ? "flex-end" : "flex-start";

		const bubble = document.createElement("div");
		bubble.innerHTML = `<strong>${user}</strong><br>${message}`;
		bubble.className = "p-2 rounded";
		bubble.style.maxWidth = "70%";
		bubble.style.backgroundColor = isOwnMessage ? "#DCF8C6" : "#E4E6EB";

		msgDiv.appendChild(bubble);
		const chatMessages = document.getElementById("chatMessages");
		chatMessages.insertBefore(msgDiv, chatMessages.firstChild);
	}

	document.getElementById("chatMessages").addEventListener("scroll", async () => {
		const chatBox = document.getElementById("chatMessages");
		if (chatBox.scrollTop === 0) {
			await loadMessages();
		}
	});

</script>
