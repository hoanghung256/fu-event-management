@*@await Html.PartialAsync("_ChatPopup")  *@

@{
    //int? currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier) != null ? int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value) : null;
    string? currentUserName = User.FindFirst(System.Security.Claims.ClaimTypes.GivenName) != null ? User.FindFirst(System.Security.Claims.ClaimTypes.GivenName).Value : null;
    ViewData["Title"] = "Chat";
}

<style>
    .chat-widget {
        width: 100%;
        max-width: 100%;
        height: calc(100vh - 7rem);
        background: #ffffff;
        display: flex;
        flex-direction: row;
        position: relative;
        margin-top: 6%;
        overflow: hidden;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
    }

    .chat-sidebar {
        width: 380px;
        min-width: 380px;
        background: #ffffff;
        display: flex;
        flex-direction: column;
        color: #2e3939;
        border-right: 1px solid #e4e6ea;
    }

    .sidebar-header {
        padding: 20px 24px;
        background: #ffffff;
        font-weight: 600;
        font-size: 24px;
        color: #2e3939;
        border-bottom: 1px solid #e4e6ea;
        display: flex;
        align-items: center;
        min-height: 72px;
    }

    .sidebar-header i {
        margin-right: 16px;
        color: #8b94a8;
        font-size: 24px;
    }

    .sidebar-list {
        list-style: none;
        padding: 8px 0;
        margin: 0;
        flex: 1;
        overflow-y: auto;
    }

    .sidebar-list::-webkit-scrollbar {
        width: 0;
    }

    .sidebar-list li {
        padding: 16px 24px;
        cursor: pointer;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        color: #2e3939;
        font-weight: 400;
        font-size: 16px;
        position: relative;
        display: flex;
        align-items: center;
        border-bottom: none;
    }

    .sidebar-list li:hover {
        background: #f8f9fa;
        transform: none;
    }

    .sidebar-list li:active {
        background: #3390ec;
        color: #ffffff;
    }

    .chat-panel {
        flex: 1;
        display: flex;
        flex-direction: column;
        background: #ffffff;
    }

    .chat-header {
        background: #ffffff;
        color: #2e3939;
        padding: 20px 24px;
        font-size: 20px;
        font-weight: 500;
        border-bottom: 1px solid #e4e6ea;
        display: flex;
        align-items: center;
        min-height: 72px;
        box-shadow: none;
    }

    .chat-header i {
        margin-right: 16px;
        color: #8b94a8;
        font-size: 24px;
    }

    .chat-area {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        background: #f7f9fc;
        background-image: 
            radial-gradient(circle at 25px 25px, rgba(255,255,255,0.2) 2px, transparent 0),
            radial-gradient(circle at 75px 75px, rgba(255,255,255,0.2) 2px, transparent 0);
        background-size: 100px 100px;
    }

    .chat-loading {
        position: absolute;
        top: 50%;
        left: 67%;
        transform: translateX(-50%);
        display: none;
        z-index: 10;
    }

    .spinner-sm {
        width: 24px;
        height: 24px;
        border: 3px solid #e4e6ea;
        border-top: 3px solid #3390ec;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 20px 24px;
        display: flex;
        flex-direction: column;
        scroll-behavior: smooth;
        gap: 8px;
    }

    .chat-messages::-webkit-scrollbar {
        width: 0;
    }

    .chat-message {
        display: flex;
        margin-bottom: 4px;
        flex-direction: column;
    }

    .chat-message.sent { 
        align-items: flex-end;
    }

    .chat-message.received { 
        align-items: flex-start;
    }

    .chat-bubble {
        padding: 12px 16px;
        border-radius: 18px;
        max-width: 70%;
        font-size: 15px;
        line-height: 1.35;
        animation: fadeInScale 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        word-wrap: break-word;
        position: relative;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    @@keyframes fadeInScale {
        from { 
            opacity: 0; 
            transform: scale(0.95) translateY(10px); 
        }
        to { 
            opacity: 1; 
            transform: scale(1) translateY(0); 
        }
    }

    .chat-message.sent .chat-bubble {
        background: #3390ec;
        color: white;
        border-bottom-right-radius: 6px;
    }

    .chat-message.received .chat-bubble {
        background: #ffffff;
        color: #2e3939;
        border-bottom-left-radius: 6px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12);
    }

    .chat-bubble strong {
        display: block;
        margin-bottom: 4px;
        font-weight: 500;
        font-size: 14px;
        opacity: 0.9;
    }

    .chat-bubble small {
        display: block;
        font-size: 13px;
        margin-top: 6px;
        opacity: 0.7;
    }

    .chat-date-divider {
        text-align: center;
        margin: 20px 0;
    }

    .chat-date-divider small {
        background: #e4e6ea;
        color: #8b94a8;
        padding: 6px 16px;
        border-radius: 16px;
        font-size: 13px;
        font-weight: 400;
        border: none;
        box-shadow: none;
    }

    .chat-input {
        display: flex;
        padding: 20px 24px;
        background: #ffffff;
        border-top: 1px solid #e4e6ea;
        align-items: flex-end;
        gap: 16px;
    }

    .chat-input input {
        flex: 1;
        padding: 12px 20px;
        border: 1px solid #e4e6ea;
        border-radius: 24px;
        font-size: 15px;
        background: #f7f9fc;
        height: 48px;
        outline: none;
        transition: all 0.2s ease;
    }

    .chat-input input:focus {
        border-color: #3390ec;
        background: #ffffff;
        box-shadow: 0 0 0 2px rgba(51, 144, 236, 0.2);
    }

    .chat-input input::placeholder {
        color: #8b94a8;
    }

    .chat-input button {
        height: 48px;
        width: 48px;
        min-width: 48px;
        padding: 0;
        border-radius: 50%;
        background: #3390ec;
        border: none;
        color: #ffffff;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 2px 8px rgba(51, 144, 236, 0.3);
    }

    .chat-input button:hover {
        background: #2980d9;
        transform: scale(1.05);
        box-shadow: 0 4px 12px rgba(51, 144, 236, 0.4);
    }

    .chat-input button:active {
        transform: scale(0.95);
    }

    @@media (max-width: 768px) {
        .chat-widget {
            flex-direction: column;
            height: 100vh;
            width: 100vw;
            margin-top: 0;
            border-radius: 0;
            box-shadow: none;
        }

        .chat-sidebar {
            width: 100%;
            min-width: auto;
            height: 40%;
            border-right: none;
            border-bottom: 1px solid #e4e6ea;
        }

        .chat-panel {
            width: 100%;
            flex: 1;
        }

        .chat-bubble {
            max-width: 85%;
        }

        .chat-messages {
            padding: 16px 20px;
        }

        .chat-input {
            padding: 16px 20px;
        }

        .sidebar-header,
        .chat-header {
            padding: 16px 20px;
            min-height: 60px;
            font-size: 20px;
        }
    }

    .d-none { 
        display: none !important; 
    }

    .list-group-item { 
        background: transparent !important; 
        border: none !important; 
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .list-group-item-action:hover { 
        background: #f8f9fa !important; 
    }

</style>

<div class="main-content" style="padding: 0 1rem;">
    <section id="chat-section">
        <div id="chatWidget" class="chat-widget">

            <div id="groupListWrapper" class="chat-sidebar">
                <div class="sidebar-header">
                    <i class="bi bi-telegram me-2"></i>
                    Collaborator Group Chat
                </div>
                <ul class="sidebar-list" id="groupList"></ul>
            </div>

            <div id="chatPanelWrapper" class="chat-panel d-none">
                <div class="chat-header" id="groupTitle">
                    <i class="bi bi-people-fill me-2"></i>
                    Select a group
                </div>
                <input type="hidden" id="currentUserName" value="@currentUserName" />

                <div class="chat-area">
                    <div id="chatMessages" class="chat-messages"></div>

                    <div id="chatLoading" class="chat-loading">
                        <div class="spinner-sm"></div>
                    </div>
                </div>

                <div class="chat-input">
                    <input type="text" id="messageInput" placeholder="Write a message..." />
                    <button id="sendButton">
                        <i class="fa-solid fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </section>
</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>

<script>
    let skipCount = 0;
    const pageSize = 10;
    let loadingOldMessages = false;
    let hasMoreMessages = true;
    let isFirstLoad = true;
    let lastRenderedDateBottom = null;
    let lastRenderedDateTop = null;

    function insertDateDivider(text, before = false) {
        const divider = document.createElement("div");
        divider.className = "chat-date-divider";
        divider.innerHTML = `<small>${text}</small>`;
        const container = document.getElementById("chatMessages");
        if (before) container.insertBefore(divider, container.firstChild);
        else container.appendChild(divider);
    }

    function formatTime(dateStr) {
        const date = new Date(dateStr);
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }

    function formatDateHeader(dateStr) {
        const date = new Date(dateStr);
        const today = new Date();
        const yesterday = new Date();
        yesterday.setDate(today.getDate() - 1);

        if (date.toDateString() === today.toDateString()) return "Today";
        if (date.toDateString() === yesterday.toDateString()) return "Yesterday";

        return date.toLocaleDateString(undefined, { weekday: 'long', year: 'numeric', month: 'short', day: 'numeric' });
    }

    // Unified message renderer (used for both append and prepend)
    function renderMessage(user, message, isOwnMessage, sentAt, prepend = false) {
        const msgDiv = document.createElement("div");
        msgDiv.className = `chat-message ${isOwnMessage ? 'sent' : 'received'}`;

        const bubble = document.createElement("div");

        const nameHtml = isOwnMessage ? '' : `<strong>${user}</strong>`;

        bubble.innerHTML = `${nameHtml}${message}<small>${sentAt}</small>`;
        bubble.className = "chat-bubble";

        msgDiv.appendChild(bubble);

        const chatMessages = document.getElementById("chatMessages");
        if (prepend) chatMessages.insertBefore(msgDiv, chatMessages.firstChild);
        else chatMessages.appendChild(msgDiv);
    }


    function appendMessage(user, message, isOwnMessage, sentAt) {
        renderMessage(user, message, isOwnMessage, sentAt, false);
        scrollToBottom();
    }

    function prependMessage(user, message, isOwnMessage, sentAt) {
        renderMessage(user, message, isOwnMessage, sentAt, true);
    }

    function scrollToBottom() {
        const chatBox = document.getElementById("chatMessages");
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub", { withCredentials: true })
        .configureLogging(signalR.LogLevel.Information)
        .withAutomaticReconnect()
        .build();

    connection.on("ReceiveMessage", function (user, message, sentAt) {
        const currentUserName = document.getElementById("currentUserName").value;
        const messageDate = new Date(sentAt).toDateString();
        if (lastRenderedDateBottom !== messageDate) {
            lastRenderedDateBottom = messageDate;
            insertDateDivider(formatDateHeader(sentAt));
        }
        appendMessage(user, message, user === currentUserName, formatTime(sentAt));
    });

    connection.start().catch(err => console.error(err.toString()));

    document.getElementById("sendButton").addEventListener("click", function (event) {
        event.preventDefault();
        const message = document.getElementById("messageInput").value.trim();
        if (message !== "") {
            connection.invoke("SendMessage", currentGroup, currentGroupEvent, message)
                .then(() => {
                    document.getElementById("messageInput").value = "";
                })
                .catch(err => console.error(err.toString()));
        }
    });

    // Send message on Enter key
    // document.getElementById("messageInput").addEventListener("keypress", function (event) {
    //     if (event.key === "Enter") {
    //         document.getElementById("sendButton").click();
    //     }
    // });

    fetch('/Chat/GetUserGroups')
        .then(res => res.json())
        .then(groups => {
            const ul = document.getElementById('groupList');
            ul.innerHTML = ''; 

            groups.forEach(group => {
                const li = document.createElement('li');
                li.className = "list-group-item list-group-item-action d-flex align-items-center gap-2";

                const firstLetter = group.name.charAt(0).toUpperCase();
                const bgColor = stringToColor(group.name);

                li.innerHTML = `
                    <div class="group-avatar" style="
                        background-color: ${bgColor};
                        color: #fff;
                        border-radius: 50%;
                        width: 36px;
                        height: 36px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-weight: bold;
                        font-size: 1rem;
                        flex-shrink: 0;
                    ">
                        ${firstLetter}
                    </div>
                    <div>
                        <div style="font-weight: 600;">${group.name}</div>
                            <!--<div style="font-size: 0.85rem; opacity: 0.8;color: #e76c1e;">${group.eventName}</div>-->
                    </div>
                `;

                li.onclick = () => loadGroupChat(group.name, group.eventName);
                ul.appendChild(li);
            });

            if (groups.length > 0) {
                loadGroupChat(groups[0].name, groups[0].eventName);
            }
        });

    function stringToColor(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            hash = str.charCodeAt(i) + ((hash << 5) - hash);
        }
        const c = (hash & 0x00FFFFFF).toString(16).toUpperCase();
        return "#" + "00000".substring(0, 6 - c.length) + c;
    }



    async function loadGroupChat(groupName, eventName) {
        currentGroup = groupName;
        currentGroupEvent = eventName;
        skipCount = 0;
        isFirstLoad = true;
        hasMoreMessages = true;
        loadingOldMessages = false;
        lastRenderedDateBottom = null;
        lastRenderedDateTop = null;

        document.getElementById("groupTitle").innerHTML = `<i class="bi bi-people-fill me-2"></i>${groupName} - ${eventName}`;
        document.getElementById("chatMessages").innerHTML = "";

        document.getElementById("chatPanelWrapper").classList.remove("d-none");

        await connection.invoke("JoinGroup", groupName, eventName);

        await loadMessages();
    }

    async function loadMessages() {
        if (loadingOldMessages || !hasMoreMessages) return;
        loadingOldMessages = true;

        const chatLoading = document.getElementById("chatLoading");
        chatLoading.style.display = "block";

        const chatBox = document.getElementById("chatMessages");
        const scrollBefore = chatBox.scrollHeight;

        const res = await fetch(`/Chat/GetGroupMessages?groupName=${currentGroup}&eventName=${currentGroupEvent}&skip=${skipCount}&take=${pageSize}`);
        const messages = await res.json();

        if (!messages || messages.length === 0) {
            hasMoreMessages = false;
            loadingOldMessages = false;
            chatLoading.style.display = "none";
            insertDateDivider(lastRenderedDateTop, true);
            return;
        }

        const currentUserName = document.getElementById("currentUserName").value;
        const reversed = messages.reverse();

        if (isFirstLoad) {
            reversed.forEach((msg, index) => {
                const messageDate = new Date(msg.sentAt).toDateString();
                if (index === 0) {
                    lastRenderedDateTop = messageDate;
                    lastRenderedDateBottom = messageDate;
                }
                if (lastRenderedDateBottom !== messageDate) {
                    lastRenderedDateBottom = messageDate;
                    insertDateDivider(formatDateHeader(msg.sentAt));
                }

                appendMessage(msg.user, msg.text, msg.user === currentUserName, formatTime(msg.sentAt));
            });
            scrollToBottom();
            isFirstLoad = false;
        } else {
            reversed.reverse().forEach(msg => {
                const messageDate = new Date(msg.sentAt).toDateString();

                if (lastRenderedDateTop !== messageDate) {
                    insertDateDivider(lastRenderedDateTop, true);
                    lastRenderedDateTop = messageDate;
                }

                prependMessage(msg.user, msg.text, msg.user === currentUserName, formatTime(msg.sentAt));
            });
            chatBox.scrollTop = chatBox.scrollHeight - scrollBefore;
        }

        skipCount += messages.length;
        loadingOldMessages = false;

        chatLoading.style.display = "none";
    }

    document.getElementById("chatMessages").addEventListener("scroll", async () => {
        const chatBox = document.getElementById("chatMessages");
        if (chatBox.scrollTop === 0) {
            await loadMessages();
        }
    });

    document.getElementById("messageInput").addEventListener("keydown", function (event) {
        if (event.key === "Enter" && !event.shiftKey) {
            event.preventDefault();
            document.getElementById("sendButton").click();
        }
    });


</script>
